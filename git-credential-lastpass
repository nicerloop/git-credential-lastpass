#!/usr/bin/env bash
# set -x

# https://git-scm.com/docs/git-credential
# https://git-scm.com/docs/gitcredentials

# https://github.com/lastpass/lastpass-cli
# https://lastpass.github.io/lastpass-cli/lpass.1.html

# https://github.com/lastpass/lastpass-cli/blob/master/contrib/examples/git-credential-lastpass
# https://github.com/lastpass/lastpass-cli/pull/587
# https://github.com/maelvls/lastpass-cli/commits/rework-git-helper/contrib/examples/git-credential-lastpass
# https://github.com/lastpass-cli-fork/lastpass-cli/

if [ $# -eq 0 ]; then
    echo "$0: missing operation" >&2
    exit
fi
if [ $# -gt 1 ]; then
    echo "$0: unexpected command line arguments '$*'" >&2
    exit
fi
if [ "$1" != "get" ]; then
    echo "$0: unexpected operation '$1'" >&2
    exit
fi

# cmd=""
# while [ $# -gt 0 ]; do
# 	case "$1" in
# 	get | store | erase)
# 		cmd="$1"
# 		shift
# 		;;
# 	*)
# 		echo "Lastpass: unexpected command line flag '$1'." >&2
# 		exit 1
# 		;;
# 	esac
# 	shift
# done

while read -r line && [ -n "$line" ]; do
    name=$(
        echo "$line" | cut -d '=' -f 1 -s
    )
    value=$(
        echo "$line" | cut -d '=' -f 2 -s
    )
    case "$name" in
    "protocol")
        param_protocol="$value"
        ;;
    "host")
        param_host="$value"
        ;;
    "path")
        param_path="$value"
        ;;
    "username")
        param_username="$value"
        ;;
    esac
done

# if [ ! $(lpass status -q) ]; then
#     if [ "$LPASS_DISABLE_PINENTRY" != "1" ]; then
#         if [ -n "$LPASS_PINENTRY" ]; then
#             pinentry=$LPASS_PINENTRY
#         else
#             pinentry="pinentry"
#         fi
#         if [ -x "$(unset -f command; command -v $pinentry)" ]; then
# 			lpassuser=$(
# 				$pinentry << EOF | grep '^D ' | cut -d ' ' -f 2
# SETTITLE git-credential-lastpass
# SETDESC Please enter the e-mail address for LastPass account.
# SETPROMPT e-mail address:
# GETPIN
# EOF
#             )
#         fi
#     fi
#     if [ -z "$lpassuser" ] && [ -n "$LPASS_ASKPASS" ] && [ -x "$(\\unset -f command; \\command -v $LPASS_ASKPASS)" ]; then
#         lpassuser=$(
#             $LPASS_ASKPASS "e-mail address:"
#         )
#     fi
#     if [ -z "$lpassuser" ]; then
# 		read -r -p "Lastpass: login required. Lastpass username: " lpassuser </dev/tty >/dev/tty
#     fi
# 	if [ -z "$lpassuser" ]; then
# 		exit
# 	fi
# 	if ! lpass login "$lpassuser" >&2; then
# 		echo "Lastpass: failed to login" >&2
# 		exit
# 	fi
# fi

ids=$(
    lpass ls --format "%ai %al %au" | (
        while read -r id url user; do
            protocol=$(
                echo "$url" | cut -d ':' -f 1 -s
            )
            user_pass_host_port=$(
                echo "$url" | cut -d '/' -f 3 -s
            )
            # user_pass=$(
            #     echo "$user_pass_host_port" | cut -d '@' -f 1 -s
            # )
            # user=$(
            #     echo "$user_pass" | cut -d ':' -f 1
            # )
            # pass=$(
            #     echo $user_pass | cut -d ':' -f 2 -s
            # )
            host_port=$(
                echo "$user_pass_host_port" | cut -d '@' -f 2
            )
            # host=$(
            #     echo $host_port | cut -d ':' -f 1
            # )
            # port=$(
            #     echo $host_port | cut -d ':' -f 2 -s
            # )
            path=$(
                echo "$url" | cut -d '/' -f 4- -s
            )
            # echo "$id $protocol $user $pass $host $port $path"
            if [ -n "$param_protocol" ] && [ "$param_protocol" != "$protocol" ]; then
                continue
            fi
            if [ -n "$param_host" ] && [ "$param_host" != "$host_port" ]; then
                continue
            fi
            if [ -n "$param_username" ] && [ "$param_username" != "$user" ]; then
                continue
            fi
            if [ -n "$param_path" ] && [ "$param_path" != "$path" ]; then
                continue
            fi
            if [ -n "$path" ] && [ "$param_path" != "$path" ]; then
                continue
            fi
            echo "$id"
        done
    )
)
id_count=$(echo "$ids" | wc -w)
if [ "$id_count" -eq "0" ]; then
    exit
fi
if [ "$id_count" -gt "1" ]; then
    echo "More than one secret found" >&2
    exit
fi
secret=$(
    lpass show "$ids"
)
secret_username=$(
    echo "$secret" | grep Username | cut -d ' ' -f 2
)
secret_password=$(
    echo "$secret" | grep Password | cut -d ' ' -f 2
)
echo "username=$secret_username"
echo "password=$secret_password"
