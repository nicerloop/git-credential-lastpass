#!/bin/sh

# A git-credential compatible helper to retrieve usernames and passwords from lastpass.

# 1. Put this somewhere in your path.
# 2. git config --global credential.helper lastpass

# https://git-scm.com/docs/gitcredentials
# https://git-scm.com/docs/git-credential

# https://github.com/lastpass/lastpass-cli/blob/master/lpass.1.txt

# parse operation from command line
# optionaly get lastpass username/email address
test "$1" = "-l" && lpassuser="$2" && shift && shift
test $# -eq 0 && echo "$0: missing operation" >&2 && exit
test $# -gt 1 && echo "$0: unexpected command line arguments '$*'" >&2 && exit
operation=$1
# silently ignore uninmplemented operations
case $operation in get | store | erase) ;; *) exit ;; esac

# parse attributes from stdin
while IFS='=' read -r key value; do
    case $key in
    protocol | host | path | username | password)
        eval "$key"="$value"
        ;;
    url)
        # extract protocol
        case $value in *://*) protocol=${value%%://*} ;; esac
        test "$protocol" && value=${value#*://}
        # extract path
        case $value in */*) path=/${value#*/} ;; esac
        value=${value%%/*}
        # extract username[:password]
        case $value in *@*) username=${value%%@*} ;; esac
        test "$username" && value=${value#*@}
        # extract password
        case $username in *:*) password=${username#*:} ;; esac
        test "$password" && username=${username%%:*}
        # finally host[:port]
        host=$value
        ;;
    esac
done

# log into lastpass if needed
# ask for username / email address if needed
if ! lpass status -q; then
    pinentry=${LPASS_PINENTRY:-pinentry}
    if [ -z "$lpassuser" ] && [ "$LPASS_DISABLE_PINENTRY" != "1" ] &&
        [ -x "$(unset -f command && command -v "$pinentry")" ]; then
        lpassuser=$(
            $pinentry <<EOF | grep '^D ' | cut -d ' ' -f 2
SETTITLE git-credential-lastpass
SETDESC Please enter the e-mail address for LastPass account.
SETPROMPT e-mail address:
GETPIN
EOF
        )
        test -z "$lpassuser" && echo "Lastpass username entry canceled" >&2 && exit
    fi
    if [ -z "$lpassuser" ] && [ -n "$LPASS_ASKPASS" ] &&
        [ -x "$(unset -f command && command -v "$LPASS_ASKPASS")" ]; then
        lpassuser=$($LPASS_ASKPASS "e-mail address:")
        test -z "$lpassuser" && echo "Lastpass username entry canceled" >&2 && exit
    fi
    if [ -z "$lpassuser" ]; then
        printf "Lastpass: login required. Lastpass username: " && read -r lpassuser </dev/tty >/dev/tty
        test -z "$lpassuser" && echo "Lastpass username entry canceled" >&2 && exit
    fi
    lpass login "$lpassuser" >&2 || echo "Lastpass: failed to login" >&2 && exit

fi

# export lastpass entries: entry_id entry_url entry_username entry_password
# filter entries according to attributes: protocol, host, username, path
lp_entries=$(lpass ls --format "%ai %al %au %ap")
lp_weight=0
while read -r entry_id entry_url entry_username entry_password; do
    if [ "$username" = "$entry_username" ] || [ ! "$username" ]; then
        case "$entry_url" in */) entry_url=${entry_url%/} ;; esac
        case "$entry_url" in
        $protocol://$host*)
            case "$protocol://$host$path" in $entry_url*)
                entry_weight=${#entry_url}
                if [ "$entry_weight" -gt "$lp_weight" ]; then
                    lp_weight=$entry_weight
                    id=$entry_id
                    test "$username" || secret_username=$entry_username
                    secret_password=$entry_password
                elif [ "$lp_weight" -eq "$lp_weight" ]; then
                    lp_weight=$entry_weight
                    id=
                    secret_username=
                    secret_password=
                fi
                ;;
            esac
            ;;
        esac
    fi
done <<EOF
$lp_entries
EOF
test "$lp_weight" -gt 0 && test ! "$id" && echo "More than one secret found" >&2 && exit

# proceed to operation
case "$operation" in
get)
    if [ "$id" ]; then
        test "$secret_username" && echo "username=$secret_username"
        echo "password=$secret_password"
    fi
    ;;
store)
    if [ "$id" ]; then
        # found, edit
        lpass edit --sync=no "$id" --non-interactive >&2 <<EOF
Username: $username
Password: $password
EOF
    else
        # not found, add
        protocol=${protocol:-https}
        lpass add --sync=no "$host" --non-interactive >&2 <<EOF
URL: $protocol://$host$path
Username: $username
Password: $password
EOF
    fi
    ;;
erase)
    if [ "$id" ]; then
        lpass rm "$id" >&2
    fi
    ;;
esac
